<?xml version="1.0" encoding="UTF-8"?>

<!-- Este arquivo pertence a Petrobras e nao pode ser utilizado fora desta 
	empresa sem previa autorizacao. -->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<properties>
		<!-- Declaro apenas as propriedades que são reusadas, ou que acho que merecem 
			algum destaque. -->
		
		<!-- joelson:adicionado -->
		<context.root>FormularioColeta</context.root>
		<default.java.version>1.6</default.java.version>
		<default.encoding>UTF-8</default.encoding>
		<!-- /joelson:adicionado -->
		
		<hibernate.jpa.version>3.4.0.GA</hibernate.jpa.version>
		<hibernate.version>3.3.2.GA</hibernate.version>
		<javaee-api.version>5</javaee-api.version>
		<jbpm.version>5.3.0.Final</jbpm.version>
		<logback.version>0.9.24</logback.version>
		<slf4j.version>1.6.4</slf4j.version>
		<spring.version>3.2.1.RELEASE</spring.version>
	</properties>
	
	<artifactId>${context.root}</artifactId>
	<groupId>br.com.petrobras.fcorp</groupId>
	<version>1.0.0</version>

	<name>Sistema</name>
	<packaging>war</packaging>

	<organization>
		<name>Petrobras</name>
		<url>http://www.petrobras.com.br</url>
	</organization>

	<build>
		<!-- joelson:adicionado -->
		<finalName>${context.root}</finalName>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
			</resource>
		</resources>
		<!-- /joelson:adicionado -->
		
		<plugins>
			<!-- Definição de versão do Java e Encoding dos fontes -->
			<!-- joelson:alterado -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.0.2</version>
				<configuration>
					<source>${default.java.version}</source>
					<target>${default.java.version}</target>
					<encoding>${default.encoding}</encoding>
					<meminitial>1024m</meminitial>
 					<maxmem>1024m</maxmem>
 					
				</configuration>
			</plugin>
			<!-- /joelson:alterado -->

			<!-- Definição do Encoding dos resources -->
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<encoding>${default.encoding}</encoding>
				</configuration>
			</plugin>

			<!-- Para o war incluir apenas as pastas WEB-INF e pages, sem o conteudo 
				estatico -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.1-beta-1</version> <!-- Com esta versão o packagingIncludes funciona! -->
				<configuration>
					<!-- packagingIncludes>WEB-INF/**,pages/**</packagingIncludes -->
					<archive>
						<manifest>
							<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
						</manifest>
						<manifestEntries>
							<Built-Date>${maven.build.timestamp}</Built-Date>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>
			
			<!-- Configuração para geração do projeto eclipse -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-eclipse-plugin</artifactId>
				<version>2.8</version>
				<configuration>
				
					<!-- joelson:adicionado -->
<!-- 					<wtpapplicationxml>true</wtpapplicationxml> -->
          			<wtpversion>2.0</wtpversion>
          			
					<buildOutputDirectory>${project.build.directory}/${context.root}/WEB-INF/classes</buildOutputDirectory>
					<wtpContextName>${context.root}</wtpContextName>
					<wtpVersion>2.0</wtpVersion>
					<!-- /joelson:adicionado -->
					
					<ajdtVersion>none</ajdtVersion>
					<downloadJavadocs>true</downloadJavadocs>
					<downloadSources>true</downloadSources>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-pmd-plugin</artifactId>
				<version>2.5</version>
				<dependencies>
					<dependency>
						<groupId>br.com.petrobras.regras</groupId>
						<artifactId>regras-pmd</artifactId>
						<version>2.0.2</version>
					</dependency>
				</dependencies>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>2.5</version>
				<dependencies>
					<dependency>
						<groupId>br.com.petrobras.regras</groupId>
						<artifactId>regras-checkstyle</artifactId>
						<version>1.2</version>
					</dependency>
				</dependencies>
				<configuration>
					<configLocation>petrobras_checkstyle_rules.xml</configLocation>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<archive>
						<manifest>
							<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
						</manifest>
					</archive>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-ejb-plugin</artifactId>
				<version>2.3</version>
				<configuration>
					<ejbVersion>3.0</ejbVersion>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-ear-plugin</artifactId>
				<version>2.6</version>
			</plugin>

			<plugin>
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<!-- Gerado pelo Eclipse. -->
				<groupId>org.eclipse.m2e</groupId>
				<artifactId>lifecycle-mapping</artifactId>
				<version>1.0.0</version>
				<configuration>
					<lifecycleMappingMetadata>
						<pluginExecutions>
							<pluginExecution>
								<pluginExecutionFilter>
									<groupId>
										org.codehaus.mojo
									</groupId>
									<artifactId>
										native2ascii-maven-plugin
									</artifactId>
									<versionRange>
										[1.0-alpha-1,)
									</versionRange>
									<goals>
										<goal>native2ascii</goal>
									</goals>
								</pluginExecutionFilter>
								<action>
									<ignore></ignore>
								</action>
							</pluginExecution>
						</pluginExecutions>
					</lifecycleMappingMetadata>
				</configuration>
			</plugin>

			<!-- Esse é novo <plugin> <groupId>org.apache.maven.plugins</groupId> 
				<artifactId>maven-eclipse-plugin</artifactId> <configuration> <additionalBuildcommands> 
				<buildcommand>org.drools.eclipse.droolsbuilder</buildcommand> </additionalBuildcommands> 
				</configuration> </plugin> -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.10</version>
			</plugin>
		</plugins>
	</build>
	
	<dependencies>
		<!-- <dependency> <groupId>org.drools</groupId> <artifactId>drools-spring</artifactId> 
			<version>5.3.1.Final</version> </dependency> -->

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.5</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>jsp-api</artifactId>
			<version>2.1</version>
			<scope>provided</scope>
		</dependency>

		<!-- jBPM -->

		<dependency>
			<groupId>org.jbpm</groupId>
			<artifactId>jbpm-bpmn2</artifactId>
			<version>${jbpm.version}</version>
			<scope>compile</scope>
		</dependency>

		<!-- Todos os exemplos que encontro dispensam essa biblioteca... <dependency> 
			<groupId>org.jbpm</groupId> <artifactId>jbpm-flow</artifactId> <version>${jbpm.version}</version> 
			</dependency> -->

		<dependency>
			<groupId>org.jbpm</groupId>
			<artifactId>jbpm-persistence-jpa</artifactId>
			<version>${jbpm.version}</version>
			<exclusions>
				<!-- Vide nota sobre a persistence-api. -->
				<exclusion>
					<groupId>javax.persistence</groupId>
					<artifactId>persistence-api</artifactId>
				</exclusion>
			</exclusions>
			<scope>compile</scope>
		</dependency>

		<!-- Precisamos do jbpm-bam pois ele contém os objetos que fazem logs de 
			auditoria. -->
		<dependency>
			<groupId>org.jbpm</groupId>
			<artifactId>jbpm-bam</artifactId>
			<version>${jbpm.version}</version>
		</dependency>

		<!-- Não vamos usar Human Task pois todos os seus handlers criam e manipulam 
			threads diretamente, o que não é permitido pela infraetrutura. Para os que 
			se interessam em aprender como tratar serviços assíncronos no jBPM, os módulos 
			de human-task podem ser muito úteis. <dependency> <groupId>org.jbpm</groupId> 
			<artifactId>jbpm-human-task</artifactId> <version>${jbpm.version}</version> 
			<scope>compile</scope> </dependency> -->

		<!-- Vou o flow builder não é necessário ao NSPC. <dependency> <groupId>org.jbpm</groupId> 
			<artifactId>jbpm-flow-builder</artifactId> <version>${jbpm.version}</version> 
			</dependency -->

		<!-- O WL 11g empacota a versão 3.2.0 da commons-collections. Ao menos 
			é mais moderna que as exigidas pelo jBPM e Hibernate. -->
		<!-- joelson:alterado -->
		<dependency>
			<artifactId>commons-collections</artifactId>
			<groupId>commons-collections</groupId>
			<version>3.2</version>
<!-- 			<scope>test</scope> -->
		</dependency>
		<!-- joelson:alterado -->

		<!-- O WL 11g parece fornecer o Javamail 1.2, mas o WL 10.3.0 fornece a 
			versão 1.4. Na minha opinião, a Oracle se atrapalhou na hora de fornecer 
			informações da especificação do Javamail usada no WL 11g. Esse número é, 
			possivelmente, a versão da implementação, pois a versão da implementação 
			do WL 10.3.0 é 1.1. O jBPM 5.2.0 depende do Javamail 1.4 e o Subetha também 
			depende de uma versão recente. O FCorp Java declara a dependência do 1.4.4. 
			Em tese, as especificações do Javamail são compatíveis retroativamente, portanto 
			conflitos são improváveis. Desta forma, decido aderir à versão especificada 
			pelo FCorp Java. -->
		<dependency>
			<groupId>javax.mail</groupId>
			<artifactId>mail</artifactId>
			<version>1.4.4</version>
			<scope>provided</scope>
		</dependency>

		<!-- Vide nota no javax.mail:mail. Escolhi escopo "test" pois o Subethasmpt 
			precisa do activation. -->
		<dependency>
			<groupId>javax.activation</groupId>
			<artifactId>activation</artifactId>
			<version>1.1.1</version>
			<scope>test</scope>
		</dependency>

		<!-- Esta biblioteca existe no WL 11g e no 10.3.0 também. A versão escolhida 
			é a usada pelo WL 11g. Tinha uma versão dessa biblioteca no JBoss 5, mas 
			não encontrei referências para ela no JBoss EAP 6. Muito estranho... Para 
			o JBoss, colocar essa lib no pacote causa erros de Classloading. O seguinte 
			enderço foi útil nesse diagnóstico: http://wiki.apache.org/jackrabbit/JackrabbitOnJBoss -->
		<dependency>
			<groupId>xml-apis</groupId>
			<artifactId>xml-apis</artifactId>
			<version>1.3.04</version>
			<scope>provided</scope>
		</dependency>

		<!-- Weblogic 11g NÃO tem dom4j. Sei que o JBoss 5 tem essa versão do dom4j, 
			mas não estou muito certo se ele entra no classpath das aplicações. -->
		<dependency>
			<groupId>dom4j</groupId>
			<artifactId>dom4j</artifactId>
			<version>1.6.1</version>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<!-- Não tem no WL 11g. Tem no JBoss 5. -->
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
			<scope>compile</scope>
		</dependency>

		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback.version}</version>
			<scope>runtime</scope>
		</dependency>



		<!-- O caso esquisito do Javassist é o seguinte. Há dependências das versões 
			3.4.GA e 3.14.GA. Acontece que a versão mais recente tem um groupId diferente 
			da versão mais antiga, apesar de possuirem a mesma estrutura de pacotes (a 
			versão mais recente tem mais pacotes). Estou apostando que a 3.14.GA simplesmente 
			expandiu a API, sem criar problemas de compatibilidade retroativa. Assim, 
			pretendo remover as referências às versões 3.4.GA. Acho extremamente improvável 
			que uma aplicação precise usar a API do Javassist diretamente. Por causa 
			disso, estou marcando-a como "runtime". Infelizmente o pessoal do Javassist 
			não parece ter pensado muito bem nas mudanças que fizeram nos seus poms... -->
		<dependency>
			<groupId>org.javassist</groupId>
			<artifactId>javassist</artifactId>
			<version>3.14.0-GA</version>
			<scope>runtime</scope>
		</dependency>

		<!-- joelson:alterado -->
<!-- 		<dependency> -->
<!-- 			<groupId>javassist</groupId> -->
<!-- 			<artifactId>javassist</artifactId> -->
<!-- 			<version>3.4.GA</version> -->
<!-- 			<scope>provided</scope> -->
<!-- 		</dependency> -->
		<!-- /joelson:alterado -->



		<!-- Hibernate O componente de persistência do jBPM 5.2 (jbpm-persistence-jpa) 
			depende do JPA 1. Apesar disso, parece que ele depende também da API do Hibernate. 
			Ocorre que o FCorp Java indica o uso de uma versão do Hibernate que não é 
			a mesma que o do jBPM 5.2, mas o FCorp Java não indica qual a versão do hibernate-entitymanager 
			que deve ser usado. Assim, vou usar a versão mais moderna das bibliotecas 
			do JPA 1 para Hibernate. Como o uso de anotações no hibernate é opcional, 
			não há vínculo direto entre algumas dessas dependências, portanto preciso 
			resolvê-las aqui. Como muito bem dizem pela Internet, isso está mais complicado 
			do que deveria ser... Como é possível observar, o pacote jbpm-persistence 
			depende de: * persistence-api: é (quase?) a mesma coisa que o ejb3-persistence. 
			Vou declará-la como provided e (tentar) excluí-la de onde aparecer. Vou favorecer 
			o ejb3-persistence 1.0.2.GA pois o WL 11g parece usar a versão 1.0.2. * ejb3-persistence: 
			será marcada como provided, pois é provided pelo WL 11g. * hibernate-entitymanager 
			* hibernate-annotations: vem com o org.hibernate:hibernate-entitymanager, 
			então não vou declarar * hibernate-commons-annotations: vem com o org.hibernate:hibernate-entitymanager, 
			então não vou declarar * hibernate-core Então, vamos lá... -->

			<!-- joelson:alterado -->
<!-- 		<dependency> -->
<!-- 			<groupId>javax.persistence</groupId> -->
<!-- 			<artifactId>persistence-api</artifactId> -->
<!-- 			<version>1.0</version> -->
<!-- 			<scope>provided</scope> -->
<!-- 		</dependency> -->
			<!-- /joelson:alterado -->

		<!-- Vide nota acima. -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>ejb3-persistence</artifactId>
			<version>1.0.2.GA</version>
			<scope>provided</scope>
		</dependency>

		<!-- joelson:alterado -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
			<version>${hibernate.jpa.version}</version>
			<exclusions>
				<!-- Vide nota acima. -->
<!-- 				<exclusion> -->
<!-- 					<groupId>javax.persistence</groupId> -->
<!-- 					<artifactId>persistence-api</artifactId> -->
<!-- 				</exclusion> -->
				<!-- Vide nota sobre o Javassist. -->
				<exclusion>
					<groupId>javassist</groupId>
					<artifactId>javassist</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<!-- /joelson:alterado -->

		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-annotations</artifactId>
			<version>${hibernate.jpa.version}</version>
		</dependency>

		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>${hibernate.version}</version>
			<scope>compile</scope>
		</dependency>
		
		<!-- O drools-compiler 5.3.1 depende de ANTLR 3.3, mas também depende do 
			ANTLR Stringtemplate 3.2.1. Por sua vez, o Stringtemplate 3.2.1 depende do 
			ANTLR 2.7.7. Essa é uma situação claramente absurda, possivelmente um defeito 
			não tratado pelo pessoal da Red Hat (ou da ANTLR). Para piorar, o hibernate-core 
			3.3.2.GA depende do ANTLR 2.7.6. Para complicar um pouco mais, o WL 11g contém 
			o ANTLR 2.7.7 dividido em dois pacotes que PARECEM ser a API e o módulo runtime. 
			Não encontrei nenhum módulo runtime do 2.7.7 nos repositórios, portanto só 
			me resta supor que tal divisão foi criada pela Oracle. Apesar de toda a confusão 
			que isso pode gerar, o ANTLR 2.x é carregado a partir de um pacote "antlr.*", 
			enquanto o ANTLR 3.x é carregado a partir do pacote "org.antlr.*". Isso deve 
			ser o suficiente para permitir que ambas as bibliotecas convivam harmoniosamente. 
			O problema está relatado em https://issues.jboss.org/browse/JBRULES-3173. 
			Eu vou assumir que isso não é problema. Vou apenas dizer para o Maven resolver 
			o conflito entre 2.7.6 e 2.7.7. Vou aproveitar para deixar o ANTLR 3.3 (e 
			seu runtime) declarado como de runtime. O mesmo ocorreá com o Stringtemplate 
			3.2.1. Não espero que as aplicações o usem diretamente... -->
		<dependency>
			<groupId>antlr</groupId>
			<artifactId>antlr</artifactId>
			<version>2.7.7</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.antlr</groupId>
			<artifactId>antlr</artifactId>
			<version>3.3</version>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<groupId>org.antlr</groupId>
			<artifactId>antlr-runtime</artifactId>
			<version>3.3</version>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<groupId>org.antlr</groupId>
			<artifactId>stringtemplate</artifactId>
			<version>3.2.1</version>
			<scope>runtime</scope>
		</dependency>


		<!-- API do JEE 5, usada para implementar alguns serviços do jBPM. -->
		<dependency>
			<groupId>javaee</groupId>
			<artifactId>javaee-api</artifactId>
			<version>${javaee-api.version}</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>javax.transaction</groupId>
			<artifactId>jta</artifactId>
			<version>1.1</version>
<!-- 			<scope>provided</scope> TODO será que devo colocar scope=test? -->
		</dependency>

		<!-- joelson:alterado -->
<!-- 		<dependency> -->
<!-- 			<groupId>javax.el</groupId> -->
<!-- 			<artifactId>el-api</artifactId> -->
<!-- 			<version>1.0</version> -->
<!-- 			<scope>provided</scope> TODO será que devo colocar scope=test? -->
<!-- 		</dependency> -->

		<!-- A versão 2.0 desta dependência é usada por um dos sub-módulos do jbpm-human-task. 
			Eventualmente tal módulo poderá ser descartado. Enquanto não decido o que 
			fazer a respeito disso, preciso garantir que sua versão é compatível com 
			a do WL 11g. -->
			
		<!-- joelson:versao usada pela engine do jbpm 5.2 e 5.3 é a 2.0 -->
		<dependency>
			<groupId>commons-net</groupId>
			<artifactId>commons-net</artifactId>
			<version>1.4.1</version>
			<scope>provided</scope>
		</dependency>

		<!-- Também tem no WL 11g e é usado por um dos sub-módulos do jbpm-human-task. 
			Ao menos neste caso, as versões são as mesmas. -->
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>1.4</version>
			<scope>provided</scope>
		</dependency>



		<!-- Teste -->

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.8.2</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.subethamail</groupId>
			<artifactId>subethasmtp</artifactId>
			<version>3.1.6</version>
			<scope>test</scope>
		</dependency>
		
		<!-- joelson:adicionado -->
		<!-- Oracle para uso local - Desenv -->
		<dependency>
		    <groupId>com.oracle</groupId>
		    <artifactId>ojdbc14</artifactId>
		    <version>10.2.0.2.0</version>
		</dependency>
	<!-- /joelson:adicionado -->
	
	<!-- joelson:adicionado para o 5.3 que não tinham no 5.2 -->
		<dependency>
			<groupId>org.hibernate.javax.persistence</groupId>
			<artifactId>hibernate-jpa-2.0-api</artifactId>
			<version>1.0.1.Final</version>
		</dependency>
		
		<dependency>
			<groupId>org.drools</groupId>
			<artifactId>knowledge-internal-api</artifactId>
			<version>5.4.0.Final</version>
		</dependency>
		
		<dependency>
			<groupId>org.jboss.netty</groupId>
			<artifactId>netty</artifactId>
			<version>3.2.0.Final</version>
		</dependency>

		<dependency>
			<groupId>com.google.protobuf</groupId>
			<artifactId>protobuf-java</artifactId>
			<version>2.4.1</version>
		</dependency>
		
		<dependency>
			<groupId>net.sf.trove4j</groupId>
			<artifactId>trove4j</artifactId>
			<version>3.0.2</version>
		</dependency>
		<!-- /joelson:adicionado -->
	</dependencies>

	<!-- As informações sobre os repositórios somente são necessárias se você 
		não tem acesso ao repositório Maven da Petrobras. Caso contrário, pode deixá-los 
		comentados. -->
	<!-- repositories> <repository> <id>jboss-public-repository-group</id> <name>JBoss 
		Public Maven Repository Group</name> <url>https://repository.jboss.org/nexus/content/groups/public-jboss/</url> 
		<layout>default</layout> <releases> <enabled>true</enabled> <updatePolicy>never</updatePolicy> 
		</releases> <snapshots> <enabled>true</enabled> <updatePolicy>never</updatePolicy> 
		</snapshots> </repository> <repository> <id>maven2-repository.java.net</id> 
		<name>Java.net Repository for Maven</name> <url>http://download.java.net/maven/2/</url> 
		<layout>default</layout> </repository> </repositories> <pluginRepositories> 
		<pluginRepository> <id>jboss-public-repository-group</id> <name>JBoss Public 
		Maven Repository Group</name> <url>https://repository.jboss.org/nexus/content/groups/public-jboss/</url> 
		<layout>default</layout> <releases> <enabled>true</enabled> <updatePolicy>never</updatePolicy> 
		</releases> <snapshots> <enabled>true</enabled> <updatePolicy>never</updatePolicy> 
		</snapshots> </pluginRepository> </pluginRepositories -->

</project>
